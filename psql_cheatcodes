POSTGRESS CHEATCODES

sudo -i -u postgres / licenta_admin
psql

\l -> listeaza baze de date
\c <nume_bd> -> te conecteaza la baza de date specificata
\COPY products(name, raw_price, raw_rating, is_in_stock, url, product_code, retailer, imagepath, category) FROM '/home/tav/Desktop/licenta/scraping/evomag/output/evomag_scrape_big.csv' DELIMITER ',' CSV HEADER;
\COPY products(name, raw_price, raw_rating, is_in_stock, url, product_code, retailer, imagepath, category) FROM '/home/tav/Desktop/licenta/scraping/vexio/output/vexio_scrape_big.csv' DELIMITER ',' CSV HEADER;

CREATE table products(
	id SERIAL PRIMARY KEY,
	name VARCHAR(500),
	raw_price FLOAT,
	raw_rating INTEGER,
	is_in_stock BOOLEAN,
	url VARCHAR(500),
	product_code VARCHAR(100),
	retailer VARCHAR(100),
	imagepath VARCHAR(150),
	category VARCHAR(150),
	predicted_price FLOAT DEFAULT -1
)

--stable
psql --host=$PGDATA --username=tav --dbname=product_administration --port=5432


\COPY products_test(name, raw_price, raw_rating, is_in_stock, url, product_code, retailer, imagepath, manufacturer, category) FROM '/home/tav/Desktop/licenta/scraping/vexio/output/vexio_2024_10_02.csv' DELIMITER ',' CSV HEADER;
\COPY products_test(name, raw_price, raw_rating, is_in_stock, url, product_code, retailer, imagepath, manufacturer, category) FROM '/home/tav/Desktop/licenta/scraping/evomag/output/evomag_2024_10_02.csv' DELIMITER ',' CSV HEADER;

===================workink========================================

CREATE OR REPLACE FUNCTION assign_categories_test(OUT p_product_code VARCHAR(255), OUT p_duplicates_number INTEGER ) RETURNS SETOF RECORD AS $$
DECLARE
	duplicates_cursor CURSOR FOR
	        SELECT product_code, COUNT(product_code) as num_of_duplicates FROM products GROUP BY product_code HAVING COUNT(product_code) > 1;
	iterator RECORD;
BEGIN
	OPEN duplicates_cursor;
	LOOP
	        FETCH NEXT FROM duplicates_cursor INTO iterator;
	        EXIT WHEN NOT FOUND;

	        p_product_code := iterator.product_code;
	        p_duplicates_number := iterator.num_of_duplicates;

	        UPDATE products
	        SET category = 'found'
	        WHERE product_code = iterator.product_code;

	        RETURN NEXT;
	END LOOP;
	CLOSE duplicates_cursor;
END;
$$
LANGUAGE PLPGSQL;

===================workink========================================

CREATE OR REPLACE FUNCTION assign_categories(OUT p_product_code VARCHAR(255), OUT p_duplicates_number INTEGER ) RETURNS SETOF RECORD AS $$
DECLARE
	duplicates_cursor CURSOR FOR
	        SELECT product_code, COUNT(product_code) as num_of_duplicates FROM products_aggregation_table GROUP BY product_code HAVING COUNT(product_code) > 1;
	iterator RECORD;
	p_category_evomag VARCHAR(225);
	p_category_vexio VARCHAR(225);
BEGIN
	OPEN duplicates_cursor;
	LOOP
	        FETCH NEXT FROM duplicates_cursor INTO iterator;
	        EXIT WHEN NOT FOUND;

	        p_product_code := iterator.product_code;
	        p_duplicates_number := iterator.num_of_duplicates;

	        SELECT category
	        INTO p_category_evomag
	        FROM products_aggregation_table
	        WHERE retailer LIKE 'evomag' AND product_code LIKE p_product_code;

		SELECT category
	        INTO p_category_vexio
	        FROM products_aggregation_table
	        WHERE retailer LIKE 'vexio' AND product_code LIKE p_product_code;

	       	RAISE NOTICE 'EVOMAG: % - VEXIO: %', p_category_evomag, p_category_vexio;

	       	IF p_category_evomag NOT LIKE p_category_vexio THEN
				UPDATE products_aggregation_table
				SET category = p_category_vexio
				WHERE category like p_category_evomag;
	        END IF;
	        RETURN NEXT;
	END LOOP;
	CLOSE duplicates_cursor;
END;
$$
LANGUAGE PLPGSQL;

==============test=================================================
UPDATE products_test
SET raw_price = floor(random() * (1500 - 50 + 1) + 50);
--------------------------
select MIN(products.raw_price) as og_raw_price, MIN(products_test.raw_price) as newest_raw_price, products.product_code
 from products
 join products_test ON products.product_code = products_test.product_code
 GROUP BY products.product_code;
--------------------------
!!!god_script

DO $$
DECLARE
    sql_query TEXT := 'SELECT * FROM table1';  -- Start with base query
    join_clause TEXT;
    i INT;
    table_names TEXT[] := ARRAY['table2', 'table3', 'table4'];  -- Array of tables to join
BEGIN
    FOR i IN 1..array_length(table_names, 1) LOOP
        join_clause := ' INNER JOIN ' || table_names[i] || ' ON table1.id = ' || table_names[i] || '.table1_id';
        sql_query := sql_query || join_clause;
    END LOOP;

    -- Execute the dynamic query
    EXECUTE sql_query;
END $$;
--------------------------
SELECT tablename
FROM pg_catalog.pg_tables
WHERE schemaname = 'public'
--------------------------
SELECT ARRAY(SELECT tablename
                 FROM pg_catalog.pg_tables
                 WHERE schemaname = 'public') INTO table_names;
--------------------------


DO $$
DECLARE
	select_clause TEXT := 'CREATE OR REPLACE VIEW price_history_view as select products.product_code, ';
    join_clause TEXT;
    i INT;
    table_names TEXT[];
BEGIN
    SELECT ARRAY(SELECT tablename
                 FROM pg_catalog.pg_tables
                 WHERE schemaname = 'public') INTO table_names;

    FOR i IN 1..array_length(table_names, 1) LOOP
		select_clause := select_clause || ' MIN(' || table_names[i] || '.raw_price) as price_' || table_names[i] || ',';

    END LOOP;

    select_clause := LEFT(select_clause, length(select_clause) - 1);
	select_clause := select_clause || E'\n' || E'FROM products';

	RAISE NOTICE 'select_clause: %', select_clause;

    FOR i IN 1..array_length(table_names, 1) LOOP

    	IF table_names[i] NOT LIKE 'products' THEN

			select_clause := select_clause || E'\nFULL OUTER JOIN ' || table_names[i]
			|| ' ON products.product_code = ' || table_names[i] || '.product_code';

		END IF;
    END LOOP;

    select_clause := select_clause || E'\nGROUP BY products.product_code;';

    RAISE NOTICE 'select_clause: %', select_clause;
	EXECUTE select_clause;
END $$;

================================================

GODLY SQL_QUERY

SELECT *
FROM products
WHERE to_tsvector(name) @@ plainto_tsquery(?1) AND
	raw_price BETWEEN ?4 AND ?5 AND
	category LIKE COALESCE(NULLIF(?6, 'undefined'), '%')
LIMIT ?2 OFFSET (?3-1) * ?2



view_products_asc
view_products_desc

CREATE OR REPLACE VIEW view_products_asc AS SELECT * FROM products ORDER BY raw_price ASC;
CREATE OR REPLACE VIEW view_products_desc AS SELECT * FROM products ORDER BY raw_price DESC;


=================procedurised_price_history======================

CREATE OR REPLACE PROCEDURE generate_price_history_view()
LANGUAGE plpgsql
AS $$
DECLARE
	select_clause TEXT := 'CREATE OR REPLACE VIEW price_history_view as select products.product_code, ';
    join_clause TEXT;
    i INT;
    table_names TEXT[];
BEGIN
    SELECT ARRAY(SELECT tablename
                 FROM pg_catalog.pg_tables
                 WHERE schemaname = 'public') INTO table_names;

    FOR i IN 1..array_length(table_names, 1) LOOP
		select_clause := select_clause || ' MIN(' || table_names[i] || '.raw_price) as price_' || table_names[i] || ',';

    END LOOP;

    select_clause := LEFT(select_clause, length(select_clause) - 1);
	select_clause := select_clause || E'\n' || E'FROM products';

	RAISE NOTICE 'select_clause: %', select_clause;

    FOR i IN 1..array_length(table_names, 1) LOOP

    	IF table_names[i] NOT LIKE 'products' THEN

			select_clause := select_clause || E'\nFULL OUTER JOIN ' || table_names[i]
			|| ' ON products.product_code = ' || table_names[i] || '.product_code';

		END IF;
    END LOOP;

    select_clause := select_clause || E'\nGROUP BY products.product_code;';

    RAISE NOTICE 'select_clause: %', select_clause;
	EXECUTE select_clause;
END $$;


=============================INSERTING INTO THE PRODCUTS ACCUMULATION TABLE===============================================

CREATE OR REPLACE PROCEDURE insert_into_aggregation_table()
LANGUAGE plpgsql
AS $$
DECLARE
	latest_table_name VARCHAR(225) := (SELECT * from latest_products_table);
	iterator RECORD;

	test_var VARCHAR(100);
	stmt VARCHAR(255);
	my_count INTEGER := 0;
BEGIN
	stmt := 'SELECT * FROM ' || quote_ident(latest_table_name);

	RAISE NOTICE '%', stmt;

	FOR iterator IN EXECUTE stmt
	LOOP
		my_count := my_count + 1;
		SELECT product_code 
		INTO test_var
		FROM products 
		WHERE product_code LIKE iterator.product_code;

		RAISE NOTICE 'COUNT: %', my_count;

		IF test_var IS NULL THEN
			RAISE NOTICE 'inserted new product with product code -- %', iterator.product_code;
			INSERT INTO products SELECT * FROM latest_table_name WHERE id = iterator.id;
		ELSE 
			RAISE NOTICE 'updated product with product code -- %', iterator.product_code;
		END IF;
	END LOOP;
  
END $$;


=============================INSERTING INTO THE PRODCUTS ACCUMULATION TABLE GODLY===============================================
--FIND LATEST SCRAPED TABLE NAME
CREATE OR REPLACE VIEW view_latest_products_table AS 
SELECT tablename 
FROM pg_tables 
WHERE tablename LIKE 'products_2%' 
ORDER BY tablename DESC 
LIMIT 1;

-->TODO --> DROP PRODUCTS AND MAKE THIS PRODUCTS
--UPDATE AGGREGATION TABLE BY INSERTING NEW VALUES AND KEEPING OLD ONES
CREATE OR REPLACE PROCEDURE insert_into_aggregation_table()
LANGUAGE plpgsql
AS $$
DECLARE
    new_table_name text;
BEGIN
	SELECT * FROM view_latest_products_table
	INTO new_table_name;

    EXECUTE format('
        CREATE TABLE products_aggregation_table AS
        SELECT n.*
        FROM %I n
        UNION ALL
        SELECT o.*
        FROM products o
        WHERE NOT EXISTS (
            SELECT 1
            FROM %I n
            WHERE n.product_code = o.product_code
        );
    ', new_table_name, new_table_name);
END $$;


=================DELETE DUPLICATES===============
-- CREATE TABLE products_lowest_price_no_dups AS SELECTING
-- ONLY SINGLE ELEMENTS AND THE DUPLICATE WITH THE LOWEST PRICE
CREATE TABLE products_lowest_price_no_dups AS SELECT t1.*
FROM products_aggregation_table t1
JOIN (
    SELECT product_code, MIN(raw_price) AS min_price
    FROM products_aggregation_table
    GROUP BY product_code
) t2
ON t1.product_code = t2.product_code
AND t1.raw_price = t2.min_price;

-- DELETING ALL BUT ONE SAME PRICE RECORDS 
DELETE FROM products_lowest_price_no_dups
WHERE id IN (
    SELECT id
    FROM (
        SELECT MIN(id) as id
        FROM products_lowest_price_no_dups
        WHERE product_code IN (
            SELECT product_code 
            FROM products_lowest_price_no_dups
            GROUP BY product_code
            HAVING COUNT(product_code) > 1
        )
        GROUP BY product_code
    ) as subquery
);
------------------------------------------------------------------



